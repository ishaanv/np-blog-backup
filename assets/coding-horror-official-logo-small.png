<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>Coding Horror</title>
<meta name="description" content="programming and human factors"/>
<meta name="HandheldFriendly" content="True"/>
<meta name="MobileOptimized" content="320"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<link rel="shortcut icon" href="/assets/images/favicon.ico?v=37072bc13c">
<link rel="apple-touch-icon" href="/assets/images/codinghorror-app-icon.png?v=37072bc13c">
<meta name="google-site-verification" content="sl0m9SU_4V0JcvjWlOX4dUFBR6VS2P4tlxjJMo0gphU"/>
<link rel="stylesheet" type="text/css" href="/assets/css/screen.css?v=37072bc13c"/>
<link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans:400italic,700italic,400,700"/>
<link rel="alternate" type="application/rss+xml" title="Coding Horror" href="http://feeds.feedburner.com/codinghorror">
</head>
<body class="home-template">
<header class="site-head">
<div class="site-head-content">
<a class="blog-logo" href="http://blog.codinghorror.com"><img src="/assets/images/codinghorror-app-icon.png?v=37072bc13c" alt="Coding Horror Logo" width="158" height="158"/></a>
<h1 class="blog-title"><a href="http://blog.codinghorror.com">Coding Horror</a></h1>
<h2 class="blog-description">programming and human factors</h2>
<div class="site-search">
<script>
                  (function() {
                    var cx = '016956275695630057531:lqveu9tah7y';
                    var gcse = document.createElement('script');
                    gcse.type = 'text/javascript';
                    gcse.async = true;
                    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;
                    var s = document.getElementsByTagName('script')[0];
                    s.parentNode.insertBefore(gcse, s);
                  })();
                </script>
<gcse:search></gcse:search>
</div>
</div>
</header>
<div class="wrap clearfix">
<div class="clearfix"></div>
<main class="content" role="main">
<article class="post">
<header class="post-header">
<span class="post-meta"><time datetime="2016-01-02">2 Jan 2016</time> </span>
<h2 class="post-title"><a href="/zopfli-optimization-literally-free-bandwidth/">Zopfli Optimization: Literally Free Bandwidth</a></h2>
</header>
<section class="post-content">
<p>In 2007 I wrote about <a href="http://blog.codinghorror.com/getting-the-most-out-of-png/">using PNGout to produce amazingly small PNG images</a>. I still refer to this topic frequently, as seven years later, the average PNG I encounter on the Internet is very unlikely to be optimized. </p>
<p>For example, consider <a href="http://pbfcomics.com/274/">this recent Perry Bible Fellowship cartoon</a>.</p>
<p><img src="/content/images/2016/01/PBF274-Adam_2-0.png" alt=""/></p>
<p>Saved directly from the PBF website, this comic is a 800 &times; 1412, 32-bit color PNG image of 671,012 bytes. Let's save it in a few different formats to get an idea of how much space this image could take up:</p>
<table style="width:320px">
<tr><td>BMP<td>24-bit<td>3,388,854</tr>
<tr><td>BMP<td>8-bit<td>1,130,678</tr>
<tr><td>GIF<td>8-bit, no dither<td>147,290</tr>
<tr><td>GIF<td>8-bit, max dither<td>283,162</tr>
<tr><td>PNG<td>32-bit<td>671,012</tr>
</table>
<p>PNG is a win because like GIF, it has built-in compression, but <em>unlike</em> GIF, you aren't limited to cruddy 8-bit, 256 color images. Now what happens when we apply PNGout to this image?</p>
<table style="width:320px">
<tr><td>Default PNG<td>671,012<td></tr>
<tr><td>PNGout<td>623,859<td>7%</tr>
</table>
<p>Take any random PNG of unknown provenance, apply PNGout, and you're likely to see around a 10% file size savings, possibly a lot more. Remember, this is <em>lossless</em> compression. The output is identical. It's a smaller file to send over the wire, and the smaller the file, the faster the decompression. This is <strong>free bandwidth</strong>, people! It doesn't get much better than this!</p>
<p>Except when it does.</p>
<p>In 2013 Google introduced a new, fully backwards compatible method of compression <a href="http://googledevelopers.blogspot.com/2013/02/compress-data-more-densely-with-zopfli.html">they call Zopfli</a>.</p>
<blockquote>
<p>The output generated by Zopfli is typically 3–8% smaller compared to <code>zlib</code> at maximum compression, and we believe that Zopfli represents the state of the art in Deflate-compatible compression. Zopfli is written in C for portability. It is a compression-only library; existing software can decompress the data. Zopfli is bit-stream compatible with compression used in gzip, Zip, PNG, HTTP requests, and others.</p>
</blockquote>
<p>I apologize for being super late to this party, but let's test this bold claim. What happens to our PBF comic?</p>
<table style="width:320px">
<tr><td>Default PNG<td>671,012<td></tr>
<tr><td>PNGout<td>623,859<td>7%</tr>
<tr><td>ZopfliPNG<td>585,117<td style="color:red">13%</style></tr>
</table>
<p>Looking good. But that's just one image. We're <a href="http://blog.discourse.org/2015/12/emoji-and-discourse/">big fans of Emoji at Discourse</a>, let's try it on the original first release of the <a href="http://emojione.com/">Emoji One</a> emoji set &ndash; that's a complete set of 842 64&times;64 PNG files in 32-bit color:</p>
<table style="width:320px">
<tr><td>Default PNG<td>2,328,243<td></tr>
<tr><td>PNGout<td>1,969,973<td>15%</tr>
<tr><td>ZopfliPNG<td>1,698,322<td style="color:red">27%</style></tr>
</table>
<p>Wow. Sign me up for some of that.</p>
<p>In my testing, Zopfli reliably produces 3 to 8 percent smaller PNG images than even the mighty PNGout, which is an incredible feat. Furthermore, any standard gzip compressed resource can benefit from Zopfli's improved deflate, <a href="https://mathiasbynens.be/demo/jquery-size">such as jQuery</a>:</p>
<p><img src="/content/images/2016/01/zopfli-vs-gzip.png" alt=""/></p>
<p>Or the standard compression corpus tests:</p>
<table style="width:360px">
<tr><td><td><code>gzip -­9</code><td>kzip<td>Zopfli</tr>
<tr><td>Alexa­ 10k<td>128mb<td>125mb<td>124mb</tr>
<tr><td><a href="https://en.wikipedia.org/wiki/Calgary_corpus">Calgary</a><td>1017kb<td>979kb<td>975kb</tr>
<tr><td><a href="https://en.wikipedia.org/wiki/Canterbury_corpus">Canterbury</a><td>731kb<td>674kb<td>670kb</tr>
<tr><td><a href="http://mattmahoney.net/dc/textdata">enwik8</a><td>36mb<td>35mb<td>35mb</tr>
</table>
<p>(Oddly enough, I had not heard of <a href="http://advsys.net/ken/utils.htm">kzip</a> &ndash; turns out that's our old friend Ken Silverman popping up again, probably using the same compression bag of tricks from his PNGout utility.)</p>
<p>But there is a catch, because <a href="https://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch">there's always a catch</a> &ndash; it's also <strong>80 times slower</strong>. No, that's not a typo. Yes, you read that right.</p>
<table style="width:300px">
<tr><td><code>gzip -­9</code><td>5.6s</tr>
<tr><td><code>7­zip ­mm=Deflate ­mx=9</code><td>128s</tr>
<tr><td>kzip<td>336s</tr>
<tr><td>Zopfli<td>454s</tr>
</table>
<p>Gzip compression is faster than it looks in the above comparsion, because level 9 is <a href="http://tukaani.org/lzma/benchmarks.html">a bit slow for what it does</a>:</p>
<table style="width:320px">
<tr><td><td>Time<td>Size</tr>
<tr><td><code>gzip -1</code><td>11.5s<td>40.6%</tr>
<tr><td><code>gzip -2</code><td>12.0s<td>39.9%</tr>
<tr><td><code>gzip -3</code><td>13.7s<td>39.3%</tr>
<tr><td><code>gzip -4</code><td>15.1s<td>38.2%</tr>
<tr><td><code>gzip -5</code><td>18.4s<td>37.5%</tr>
<tr><td><code>gzip -6</code><td>24.5s<td>37.2%</tr>
<tr><td><code>gzip -7</code><td>29.4s<td>37.1%</tr>
<tr><td><code>gzip -8</code><td>45.5s<td>37.1%</tr>
<tr><td><code>gzip -9</code><td>66.9s<td>37.0%</tr>
</table>
<p>You decide if that whopping 0.1% compression ratio difference between <code>gzip -7</code>and <code>gzip -9</code> is worth the <em>doubling</em> in CPU time. In related news, this is why pretty much every compression tool's so-called "Ultra" compression level or mode is generally a bad idea. You <a href="http://blog.codinghorror.com/compression-and-cliffs/">fall off an algorithmic cliff</a> pretty fast, so stick with the middle or the optimal part of the curve, which tends to be the default compression level. They do pick those defaults for a reason.</p>
<p>PNGout was not exactly <em>fast</em> to begin with, so imagining something that's 80 times slower (at best!) to compress an image or a file is definite cause for concern. You may not notice on small images, but try running either on a larger PNG and it's basically time to go get a sandwich. Or if you have a multi-core CPU, 4 to 16 sandwiches. This is why applying Zopfli to user-uploaded images might not be the greatest idea, because the first server to try Zopfli-ing a 10k &times; 10k PNG image is in for a hell of a surprise.</p>
<p>However, remember that <em>decompression</em> is still the same speed, and totally safe. This means <strong>you probably only want to use Zopfli on pre-compiled resources</strong>, which are designed to be compressed once and downloaded millions of times &ndash; rather than a bunch of PNG images your users uploaded which may only be viewed a few hundred or thousand times at best, regardless of how optimized the images happen to be.</p>
<p>For example, at <a href="http://discourse.org">Discourse</a> we have a default avatar renderer which produces nice looking PNG avatars for users based on the first letter of their username, plus a color scheme selected via the hash of their username. Oh yes, and the very nice <a href="https://www.google.com/fonts/specimen/Roboto">Roboto open source font</a> from Google. </p>
<table style="width:320px">
<tr>
<td><img src="/content/images/2016/01/discourse-default-avatar-a.png" style="border-radius:50%" width="100">
<td><img src="/content/images/2016/01/discourse-default-avatar-d.png" style="border-radius:50%" width="100">
<td><img src="/content/images/2016/01/discourse-default-avatar-s.png" style="border-radius:50%" width="100">
</tr>
</table>
<p>We spent a <em>lot</em> of time optimizing the output avatar images, because these avatars can be served millions of times, and pre-rendering the whole lot of them, given the constraints of &hellip;</p>
<ul>
<li>10 numbers</li>
<li>26 letters</li>
<li>~250 color schemes</li>
<li>~5 sizes</li>
</ul>
<p>&hellip; isn't unreasonable at around 45,000 unique files. We also have a centralized https CDN we set up to to serve avatars (if desired) across all Discourse instances, to further reduce load and increase cache hits.</p>
<p>Because these images stick to shades of one color, I reduced the color palette to 8-bit (actually 128 colors) to save space, and of course we run PNGout on the resulting files. They're about as tiny as you can get. When I ran Zopfli on the above avatars, I was super excited to see my expected 3 to 8 percent free file size reduction and after the console commands ran, I saw that saved &hellip; 1 byte, 5 bytes, and 2 bytes respectively. <a href="https://wompwompwomp.com/">Cue sad trombone</a>.</p>
<p>(Yes, it is technically possible <a href="http://pointlessramblings.com/posts/pngquant_vs_pngcrush_vs_optipng_vs_pngnq/">to produce strange "lossy" PNG images</a>, but I think that's counter to the spirit of PNG which is designed for <em>lossless</em> images. If you want lossy images, <a href="http://blog.codinghorror.com/screenshots-jpeg-vs-gif/">go with JPG</a> or another lossy format.)</p>
<p>The great thing about Zopfli is that, assuming you are OK with the extreme up front CPU demands, it is a "set it and forget it" optimization step that can apply anywhere and will never hurt you. Well, other than possibly burning a lot of spare CPU cycles.</p>
<p>If you work on a project that serves compressed assets, take a close look at Zopfli. It's not a silver bullet &ndash; as with all advice, run the tests on <em>your</em> files and see &ndash; but it's about as close as it gets to <strong>literally free bandwidth</strong> in our line of work.</p>
<table>
<tr><td class="welovecodinghorror">
[advertisement] <a href="http://careers.stackoverflow.com" rel="nofollow">Find a better job the Stack Overflow way</a> - what you need when you need it, no spam, and no scams.
</td></tr>
</table>
<b><a href="http://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/#discourse-comments">Discussion</a></b>
</section>
</article>
<article class="post">
<header class="post-header">
<span class="post-meta"><time datetime="2015-12-04">4 Dec 2015</time> </span>
<h2 class="post-title"><a href="/the-hugging-will-continue-until-morale-improves/">The Hugging Will Continue Until Morale Improves</a></h2>
</header>
<section class="post-content">
<p>I saw in today's news that Apple <a href="https://t.co/KpC9xID5kU">open sourced their Swift language</a>. One of the most influential companies in the world explicitly adopting an open source model &ndash; that's great! I'm a believer. One of the big reasons <a href="http://blog.codinghorror.com/civilized-discourse-construction-kit/">we founded Discourse</a> was to build an open source solution that anyone, anywhere could use and safely build upon.</p>
<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">It&#39;s not that Unix won -- just that closed source lost. Big time.</p>&mdash; Jeff Atwood (@codinghorror) <a href="https://twitter.com/codinghorror/status/616377394253795328">July 1, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>People were also encouraged that Apple was so refreshingly open about this whole process and involving the larger community in the process. They even <a href="https://twitter.com/mcdado/status/672509114476601345">hired from the community</a>, which is something I always urge companies to do.</p>
<p>Also, not many people were, shall we say &hellip; <em>fans</em> &hellip; of Objective C <a href="http://www.antonzherdev.com/post/70064588471/top-13-worst-things-about-objective-c">as a language</a>. There was a lot of community interest in having another viable modern language to write iOS apps in, and to Apple's credit, they produced Swift, and even promised to open source it by the end of the year. And they delivered, in a deliberate, thoughtful way. (Did I mention that <a href="https://github.com/apple/swift-cmark">they use CommonMark</a>? That's kind of awesome, too.)</p>
<p>One of my heroes, Miguel de Icaza, happens to have <em>lots</em> of life experience in open sourcing things that were not exactly open source to start with. He applauded the move, and even made a small change to his Mono project in tribute:</p>
<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">When Swift was open sourced today, I saw they had a Code of Conduct. We had to follow suit, Mono has adopted it: <a href="https://t.co/hVO3KL1Dn5">https://t.co/hVO3KL1Dn5</a></p>&mdash; Miguel de Icaza (@migueldeicaza) <a href="https://twitter.com/migueldeicaza/status/672590341757927426">December 4, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Which I also thought was kinda cool.</p>
<p>It surprises me that anyone could ever object to the mere <em>presence</em> of a code of conduct. But <a href="https://medium.com/@jmspool/safe-conferences-are-deliberately-designed-2849b6cd3658">some people do</a>.</p>
<blockquote>
<ul>
<li><p>A weak Code of Conduct is a placebo label saying a conference is safe, without actually ensuring it’s safe.</p></li>
<li><p>Absence of a Code of Conduct does not mean that the organizers will provide an unsafe conference.</p></li>
<li><p>Creating safety is not the same as creating a feeling of safety.</p></li>
<li><p>Things organizers can do to make events safer: Restructure parties to reduce unsafe intoxication-induced behavior; work with speakers in advance to minimize potentially offensive material; and provide very attentive, mindful customer service consistently through the attendee experience.</p></li>
<li><p>Creating a safe conference is more expensive than just publishing a Code of Conduct to the event, but has a better chance of making the event safe.</p></li>
<li><p>Safe conferences are the outcome of a deliberate design effort.</p></li>
</ul>
</blockquote>
<p>I have to say, I don't understand this at all. Even if you do believe these things, why would you say them <em>out loud?</em> What possible constructive outcome could result from you saying them? It's a textbook case of honesty <a href="http://blog.codinghorror.com/trust-me-im-lying/">not always being the best policy</a>. If this is all you've got, just say nothing, or wave people off with platitudes, like politicians do. And if you're Jared Spool, notable and <a href="https://en.wikipedia.org/wiki/Jared_Spool">famous within your field</a>, it's even worse &ndash; what does this say to everyone else working in your field?</p>
<p>Mr. Spool's central premise is this:</p>
<blockquote>
<p>Creating safety is not the same as creating a feeling of safety.</p>
</blockquote>
<p>Which, actually &hellip; isn't true, and runs counter to everything I know about empathy. If you've ever watched It's Not About the Nail, you'll understand that <strong>a <em>feeling</em> of safety is, in fact, what many people are looking for</strong>. It's not the whole story by any means, but it's a very important starting point. An anchor.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/-4EDhdAHrOg" frameborder="0" allowfullscreen></iframe>
<p>People understand <a href="https://medium.com/@ag_dubs/no-true-conference-organizer-dd0ff11294a">you cannot possibly protect them from every single possible negative outcome at a conference</a>. That's absurd. But they also want to hear you stand up for them, and say out loud that, yes, these are the things we believe in. This is what we know to be true. Here is how we will look out for each other.</p>
<p>I also had a direct flashback to Deborah Tannen's groundbreaking <a href="http://www.amazon.com/dp/0060959622/?tag=codihorr-20">You Just Don't Understand</a>, in which you learn that <strong>men are all about fixing the problem</strong>, so much so that they rush headlong into any remotely plausible solution, without stopping along the way to actually <em>listen</em> and appreciate the depth of the problem, which maybe &hellip; can't really even <em>be</em> fixed?</p>
<blockquote>
<p>If women are often frustrated because men do not respond to their troubles by offering matching troubles, men are often frustrated because women do &hellip; he feels she is trying to take something away from him by denying the uniqueness of his experience &hellip; if women resent men's tendency to offer solutions to problems, men complain about women's refusal to take action to solve the problems they complain about.</p>
<p>Since many men see themselves as problem solvers, a complaint or a trouble is a challenge &hellip; Trying to solve a problem or fix a trouble focuses on the message level. But for most women who habitually report problems at work or in friendships, the message is not the main point &hellip; trouble talk is intended to reinforce rapport by sending the metamessage "We're the same; you're not alone."</p>
<p>Women are frustrated when they not only don’t get this reinforcement but, quite the opposite, feel distanced by the advice, which seems to send the metamessage "We’re not the same. You have the problems; I have the solutions."</p>
</blockquote>
<p>Having children really underscored this point for me. The quickest way to turn a child's frustration into a screaming, explosive tantrum is to <strong>try to fix their problem for them</strong>. This is such a hard thing for engineers to wrap their heads around, particularly male engineers, because we are <em>all about</em> fixing the problems. That's what we do, right? That's why we exist? We fix problems? </p>
<p>I once wrote this in reply to <a href="https://community.imgur.com">an Imgur discussion topic</a> about navigating an "emotionally charged sitation":</p>
<blockquote>
<p>Oh, you want a master class in dealing with emotionally charged situations? Well, why didn't you just say so?</p>
<p><strong>Have kids.</strong> Within a few years you will learn to be an expert in dealing with this kind of stuff, because what nobody tells you about having kids is that for the first ~5 years, they are constantly. freaking. the. f**k. out.</p>
<p><a href="http://jasongood.net/365/2012/12/46-reasons-why-my-three-year-old-might-be-freaking-out/">46 Reasons My Three Year Old Might Be Freaking Out</a></p>
<p>If this seems weird to you, or like some kind of made up exaggerated hilarious absurd brand of humor, oh trust me. It's not. Real talk. <em>This is actually how it is.</em></p>
<p>In their defense, it's not their fault: they've never felt fear, anger, hunger, jealousy, love, or any of the dozen other incredibly complex emotions you and I deal with on a daily basis. So they learn. But along the way, there will be many many many manymanymanymany freakouts. And guess who's there to help them navigate said freakouts?</p>
<p>You are.</p>
<p>What works <a href="http://blog.codinghorror.com/how-to-talk-to-human-beings/">is surprisingly simple</a>:</p>
<ul>
<li>Be there.</li>
<li>Listen.</li>
<li>Empathize, hug, and echo back to them. <em>Don't</em> try to solve their problems! DO NOT DO IT! Paradoxically, this only makes it way worse if you do. Let them work through the problem on their own. They always will &ndash; and knowing someone trusts you enough to figure our your own problems is a major psychological boost.</li>
</ul>
<p>You gotta <a href="http://learn.genetics.utah.edu/content/epigenetics/rats/">lick your rats</a>, man.</p>
<p>(protip: this works identically on adults and kids. Turns out most so-called adults aren't fully grown up. Who knew?)</p>
</blockquote>
<p>I guess my point is that rats aren't so different from people. We all want the same thing. Comfort from someone who can tell us that the world is safe, the world is not out to get you, that bad things can (and might) happen to you but <em>you'll still be OK because we will help you</em>. We're all in this thing together, you're a human being much like myself and we love you. </p>
<p><strong>That's why a visible, public code of conduct is a good idea, not only at an in-person conference, but also on a software project like Swift, or Mono.</strong> But programmers being programmers &ndash; because they spend all day every day mired in the crazy world of infinitely recursive rules from their OS, from their programming language, from their APIs, from their tools &ndash; are rules lawyers <em>par excellence</em>. Nobody on planet Earth is better at arguing to the death over a set of completely arbitrary, made up rules than the average programmer.</p>
<p>I knew in my heart of hearts that someone &ndash; and by someone I mean a programmer &ndash; would inevitably complain about the fact that Mono had added a code of conduct, another "unnecessary" ruleset. So I made a programmer joke.</p>
<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/migueldeicaza">@migueldeicaza</a> I find these rules offensive and will be fining a complaint</p>&mdash; Jeff Atwood (@codinghorror) <a href="https://twitter.com/codinghorror/status/672604329627418630">December 4, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>This is the second time in as many days that I made what I <em>thought</em> was an obvious joke on Twitter that was interpreted seriously.</p>
<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">When someone starts at Discourse, I have the talk with them. &quot;You remember your family? Forget them. Look at me. *We* are your family now.&quot;</p>&mdash; Jeff Atwood (@codinghorror) <a href="https://twitter.com/codinghorror/status/672142544642248704">December 2, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>OK, maybe sometimes my Twitter jokes aren't very good. Well, you know, that's just, like &hellip; <em>your opinion</em>, man. I should probably switch from Twitter to Myspace or Ello or Google Plus or Snapchat or something.</p>
<p>But it bothered me that people, any people, would think I actually asked new hires to put the company above their family.* Or that I didn't believe in a code of conduct. I guess some of that comes from having ~200k followers; once your audience gets big enough, <a href="https://en.wikipedia.org/wiki/Poe%27s_law">Poe's Law</a> becomes inevitable?</p>
<p>Anyway, I wanted to say I'm sorry. And I'm particularly sorry that <a href="http://eev.ee/">eevee</a>, who wrote that <em>awesome</em> <a href="http://blog.codinghorror.com/the-php-singularity/">PHP is a Fractal of Bad Design article that I once riffed on</a>, thought I was serious, or even worse, that my joke was in bad taste. Even though <a href="http://eev.ee/blog/2015/09/17/the-sad-state-of-web-app-deployment/">the negative article about Discourse</a> eevee wrote did kinda hurt my feelings.</p>
<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/samsaffron">@samsaffron</a> <a href="https://twitter.com/JakubJirutka">@JakubJirutka</a> programmers should not have feelings that is a liability</p>&mdash; Jeff Atwood (@codinghorror) <a href="https://twitter.com/codinghorror/status/649743704069029888">October 2, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I know we have our differences, but if we as programmers can't come together through our collective shared horror over PHP, the Nickelback of programming languages, then clearly I have failed.</p>
<p>To show that <strong>I absolutely do believe in the value of a code of conduct</strong>, even as public statements of intent that we may not completely live up to, even if we've never had any incidents or problems that would require formal statements &ndash; I'm also adding a code of conduct as defined by <a href="http://contributor-covenant.org/">contributor-covenant.org</a> to the <a href="https://github.com/discourse/discourse">Discourse project</a>. We're all in this open source thing together, you're a human being <a href="http://blog.codinghorror.com/what-if-we-could-weaponize-empathy/">very much like us</a>, and we vow to treat you with the same respect we'd want you to treat us. This should not be controversial. It should be common. And saying so matters.</p>
<p>If you maintain an open source project, I strongly urge you to consider formally adopting a <a href="http://contributor-covenant.org/">code of conduct</a>, too.</p>
<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/codinghorror">@codinghorror</a> hugs!</p>&mdash; Miguel de Icaza (@migueldeicaza) <a href="https://twitter.com/migueldeicaza/status/672619657703084033">December 4, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>The hugging will continue until morale improves.</p>
<p><small>* That's only required of co-founders</small></p>
<table>
<tr><td class="welovecodinghorror">
[advertisement] Building out your tech team? <a href="http://careers.stackoverflow.com/products" rel="nofollow">Stack Overflow Careers</a> helps you hire from the largest community for programmers on the planet. We built our site with developers like you in mind.
</td></tr>
</table>
<b><a href="http://blog.codinghorror.com/the-hugging-will-continue-until-morale-improves/#discourse-comments">Discussion</a></b>
</section>
</article>
<article class="post">
<header class="post-header">
<span class="post-meta"><time datetime="2015-11-30">30 Nov 2015</time> </span>
<h2 class="post-title"><a href="/the-2016-htpc-build/">The 2016 HTPC Build</a></h2>
</header>
<section class="post-content">
<p>I've <a href="http://blog.codinghorror.com/if-loving-computers-is-wrong-i-dont-want-to-be-right/">loved many computers in my life</a>, but the HTPC has always had a special place in my heart. It's the only always-on workhorse computer in our house, it is utterly silent, totally reliable, sips power, and it's at the center of our home entertainment, networking, storage, and gaming. This handy box does it all, 24/7.</p>
<p><img src="/content/images/2015/11/antec-itx-casejpg.jpg" alt=""/></p>
<p>I love this little machine to death; it's always been there for me and my family. The <b>steady march of improvements in my HTPC build</b> over the years lets me look back and see how far the old beige box PC has come in the decade I've been blogging:</p>
<table cellpadding=4 cellspacing=4>
<tr>
<td><a href="http://blog.codinghorror.com/pentium-m-home-theater-pc/">2005</a><td>~$1000<td>512MB RAM, 1 CPU<td>80w
</tr>
<tr>
<td><a href="http://blog.codinghorror.com/building-your-own-home-theater-pc/">2008</a><td>~$520<td>2GB RAM, 2 CPU<td>45w
</tr>
<tr>
<td><a href="http://blog.codinghorror.com/revisiting-the-home-theater-pc/">2011</a><td>~$420<td>4GB RAM, 2/4 CPU + GPU<td>22w
</tr>
<tr>
<td><a href="http://blog.codinghorror.com/the-2013-htpc-build/">2013</a><td>~$300<td>8GB RAM, 2/4 CPU + GPU&times;2<td>15w
</tr>
<tr>
<td><b>2016</b><td><b>~$320</b><td><b>8GB RAM, 2/4 CPU + GPU&times;4</b><td><font color="red"><b>10w</font></span>
</tr>
</table>
<p>As expected, the per-thread performance increase from 2013's Haswell CPU to 2016's Skylake CPU is modest &ndash; 20 percent at best, and that might be rounding up. About all you can do is slap more cores in there, to very limited benefit in most applications. The 6100T I chose is dual-core plus hyperthreading, which I consider the sweet spot, but there are some other <a href="http://ark.intel.com/compare/88200,88183,90734,90725">Skylake 6000 series variants at the same 35w power envelope</a> which offer true quad-core, or quad-core plus hyperthreading &ndash; and, inevitably, a slightly lower base clock rate. So it goes.</p>
<p>The real story is how idle power consumption was <strong>reduced another 33 percent</strong>. Here's what I measured with <a href="http://blog.codinghorror.com/why-estimate-when-you-can-measure/">my trusty kill-a-watt</a>:</p>
<ul>
<li><b>10w</b> idle with display off
<li>11w idle with display on
<li>13w active standard netflix (720p?) movie playback
<li>14w multiple torrents, display off
<li>15w 1080p video playback in MPC-HC x64
<li>40w Lego Batman 3 high detail 720p gameplay
<li><b>56w</b> Prime95 full CPU load + Rthdribl full GPU load
</ul>
<p>These are impressive numbers, much better than I expected. Maybe part of it is the latest Windows 10 update which <a href="http://www.anandtech.com/show/9751/examining-intel-skylake-speed-shift-more-responsive-processors">supports the new Speed Shift technology in Skylake</a>. Speed Shift hands over CPU clockspeed control to the CPU itself, so it can ramp its internal clock up and down dramatically faster than the OS could. A Skylake CPU, with the right OS support, gets up to speed and back to idle faster, resulting in better performance and less overall power draw.</p>
<p>Skylake's on-board <b>HD 530 graphics is about twice as fast as the HD 4400 that it replaces</b>. Haswell offered the first reasonable big screen gaming GPU on an Intel CPU, but only just. 720p was <em>mostly</em> attainable in older games with the HD 4400, but I sometimes had to drop to medium detail settings, or lower. Two generations on, with the HD 530, even recent games like GRID Autosport, Lego Jurassic Park and so on can now be played at 720p with high detail settings at consistently high framerates. It depends on the game, but a few can even be played at 1080p now with medium settings. I did have at least one saved benchmark result on the disk to compare with:</p>
<table>
<tr>
<td>GRID 2, 1280&times;720, high detail defaults<td><td><td>
</tr>
<tr>
<td><td>Max<td>Min<td>Avg
</tr>
<tr>
<td>i3-4130T, Intel HD 4400 GPU<td>32<td>21<td>27
</tr>
<tr>
<td>i3-6100T, Intel HD 530 GPU<td>50<td>32<td>39
</tr>
</table>
<p>Skylake is a legitimate gaming system on a chip, provided you are OK with 720p. It's tremendous fun to play Lego Batman 3 with my son.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/7bsHsp2WXUI" frameborder="0" allowfullscreen></iframe>
<p>At 720p using high detail settings, where there used to be many instances of notable slowdown, particularly in co-op, it now feels very smooth throughout. And since games are much cheaper on PC than consoles, <a href="http://store.steampowered.com/">particularly through Steam</a>, we have access to a complete range of gaming options from new to old, from indie to mainstream &ndash; and an enormous, inexpensive back catalog.</p>
<p><img src="/content/images/2015/11/steam-game-choices.jpg" alt=""/></p>
<p>Of course, this is still far from the performance you'd get out of a $300 video card or a $300 console. You'll never be able to play a cutting edge, high end game like GTA V or Witcher 3 on this HTPC box. But <em>you may not need to</em>. <a href="http://store.steampowered.com/streaming/">Steam in-home streaming</a> has truly come into its own in the last year. I tried streaming Batman: Arkham Knight from my beefy home office computer to the HTPC at 1080p, and I was surprised to discover just how effortless it was &ndash; nor could I detect any visual artifacts or input latency.</p>
<p><img src="/content/images/2015/11/steam-streaming.jpg" alt=""/></p>
<p>It's <a href="http://www.pcgamer.com/how-to-set-up-steam-in-home-streaming-on-your-pc/#page-1">super easy to set up</a> &ndash; just have the Steam client running on both machines at a logged in Windows desktop (can't be on the lock screen), and press the Stream button on any game that you don't have installed locally. Be careful with WiFi when streaming high resolutions, obviously, but if you're on a wired network, I found the experience is nearly identical to playing the game locally. As long as the game has native console / controller support, like Arkham Knight and Fallout 4, streaming to the big screen works great. Try it! That's how Henry and I are going to play through <a href="http://store.steampowered.com/app/225540/">Just Cause 3</a> this Tuesday and <a href="http://blog.codinghorror.com/my-holiday-in-beautiful-panau/">I can't wait</a>.</p>
<p>As before in 2013, I only upgraded the guts of the system, so the incremental cost is low.</p>
<ul>
<li><a href="http://www.amazon.com/dp/B015CQ8D9Q/?tag=codihorr-20">GA-H170N-WIFI</a> H170 motherboard &mdash; $120</li>
<li><a href="http://www.amazon.com/dp/B00MMLUZ2I/?tag=codihorr-20">8GB DDR4</a> RAM &mdash; $46</li>
<li><a href="http://www.amazon.com/dp/B0161V02ZO/?tag=codihorr-20">Intel i3-6100T</a> 35w, 3.2 GHz dual core CPU &mdash; $155</li>
</ul>
<p>That's a total of <strong>$321</strong> for this upgrade cycle, about the cost of a new Xbox One or PS4. The i3-6100T should be a bit cheaper; according to Intel it has the same list price as the i3-6100, but suffers from weak availability. The motherboard I chose is a little more expensive, too, perhaps because it <a href="http://www.gigabyte.com/products/product-page.aspx?pid=5552#ov">includes extras like built in WiFi and M.2 support</a>, although I'm not using either quite yet. You might be able to source a cheaper H170 motherboard than mine.</p>
<p>The rest of the system has <a href="http://blog.codinghorror.com/the-2013-htpc-build/">not changed much since 2013</a>:</p>
<ul>
<li><a href="http://www.amazon.com/gp/product/B0035UETHW/?tag=codihorr-20">PicoPSU 90</a></td> &mdash; $50</li>
<li><a href="http://www.amazon.com/gp/product/B0035FIS2O/?tag=codihorr-20">Antec ISK 300-150</a> &mdash; $68</li>
<li><a href="http://www.amazon.com/dp/B00OBRE5UE/?tag=codihorr-20">512GB SSD boot drive</a> &mdash; $150</li>
<li><a href="http://www.amazon.com/dp/B00I8O6OQ4/?tag=codihorr-20">2TB 2.5" HDD</a> &times; 2 &mdash; $200</li>
</ul>
<p>Populate these items to taste, pick whatever drives and mini-ITX case you prefer, but <strong>definitely stick with the PicoPSU</strong>, because removing the large, traditional case power supply makes the setup both a) much more power efficient at low wattage, and b) much roomier inside the case and easier to install, upgrade, and maintain.</p>
<p>I also switched to <a href="http://www.amazon.com/dp/B015IX3X3E/?tag=codihorr-20">Xbox One controllers</a>, for no really good reason other than the Xbox 360 is getting more obsolete every month, and now that my beloved Rock Band 4 is available on next-gen systems, I'm trying to slowly evict the 360s from my house.</p>
<p><a href="http://www.amazon.com/dp/B015IX3X3E/?tag=codihorr-20"><img src="/content/images/2015/11/xbox-one-controller.jpg" alt="" title=""/></a></p>
<p>The <a href="http://www.amazon.com/dp/B00ZB7W4QU/?tag=codihorr-20">Windows 10 wireless Xbox One adapter</a> does have some perks. In addition to working with the newer and slightly nicer gamepads from the Xbox One, it supports an audio stream over each controller via the controller's headset connector. But really, for the purposes of Steam gaming, any USB controller will do.</p>
<p>While I've been over the moon in love with my HTPC for years, and I liked the Xbox 360, I have been thoroughly unimpressed with my newly purchased Xbox One. Both the new and old UIs are hard to use, it's quite slow relative to my very snappy HTPC, and it has a ton of useless features that I don't care about, like broadcast TV support. About all the Xbox One lets you do is <em>sometimes</em> play next gen games at 1080p without paying $200 or $300 for a fancy video card, and let's face it &ndash; the PS4 does that slightly better. <strong>If those same games are available on PC, you'll have a better experience streaming them from a gaming PC</strong> to either a cheap Steam streaming box, or a generalist HTPC like this one. </p>
<p>The Xbox One and PS4 are <a href="http://www.extremetech.com/gaming/156273-xbox-720-vs-ps4-vs-pc-how-the-hardware-specs-compare">effectively plain old PCs</a>, built on:</p>
<ul>
<li>Intel Atom class (aka slow) AMD 8-core x86 CPU</li>
<li>8 GB RAM</li>
<li>AMD Radeon 77xx / 78xx GPUs</li>
<li>cheap commodity 512GB or 1TB hard drives (not SSDs)</li>
</ul>
<p>The <strong>golden age of x86 gaming</strong> is well upon us. That's why the future of PC gaming is looking brighter every day. We can see it coming true in the solid GPU and idle power improvements in Skylake, riding the inevitable wave of x86 becoming the dominant kind of (non mobile, anyway) gaming for the forseeable future. </p>
<table>
<tr><td class="welovecodinghorror">
[advertisement] At Stack Overflow, we help developers learn, share, and grow. Whether you’re looking for your next dream job or looking to build out your team, <a href="http://careers.stackoverflow.com" rel="nofollow">we've got your back</a>.
</td></tr>
</table>
<b><a href="http://blog.codinghorror.com/the-2016-htpc-build/#discourse-comments">Discussion</a></b>
</section>
</article>
<article class="post">
<header class="post-header">
<span class="post-meta"><time datetime="2015-11-19">19 Nov 2015</time> </span>
<h2 class="post-title"><a href="/to-ecc-or-not-to-ecc/">To ECC or Not To ECC</a></h2>
</header>
<section class="post-content">
<p>On one of my visits to the <a href="http://www.computerhistory.org/">Computer History Museum</a> &ndash; and by the way this is an absolute <em>must-visit</em> place if you are ever in the San Francisco bay area &ndash; I saw an early Google server rack circa 1999 in the exhibits.</p>
<p><img src="/content/images/2015/11/old-google-server-rack.jpg" alt=""/></p>
<p>Not too fancy, right? Maybe even &hellip; a little janky? This is <a href="http://blog.codinghorror.com/building-a-computer-the-google-way/">building a computer the Google way</a>:</p>
<blockquote>
<p>Instead of buying whatever pre-built rack-mount servers Dell, Compaq, and IBM were selling at the time, <strong>Google opted to hand-build their server infrastructure themselves</strong>. The sagging motherboards and hard drives are literally propped in place on handmade plywood platforms. The power switches are crudely mounted in front, the network cables draped along each side. The poorly routed power connectors snake their way back to generic PC power supplies in the rear.</p>
<p>Some people might look at these early Google servers and see an amateurish fire hazard. Not me. I see a prescient understanding of how inexpensive commodity hardware would shape today's internet. I felt right at home when I saw this server; it's exactly what I would have done in the same circumstances. This rack is a perfect example of the commodity x86 market D.I.Y. ethic at work: if you want it done right, and done inexpensively, you build it yourself.</p>
</blockquote>
<p>This rack is now immortalized in <a href="http://americanhistory.si.edu/press/fact-sheets/google-corkboard-server-1999">the National Museum of American History</a>. Urs Hölzle <a href="https://plus.google.com/+UrsH%C3%B6lzle/posts/VGwMnY3oUSY">posted lots more juicy behind the scenes details</a>, including the exact specifications:</p>
<ul>
<li>Supermicro P6SMB motherboard</li>
<li>256MB PC100 memory</li>
<li>Pentium II 400 CPU</li>
<li>IBM Deskstar 22GB hard drives (&times;2)</li>
<li>Intel 10/100 network card</li>
</ul>
<p>When I <a href="http://blog.codinghorror.com/farewell-stack-exchange/">left Stack Exchange</a> (sorry, <a href="https://blog.stackoverflow.com/2015/09/were-changing-our-name-back-to-stack-overflow/">Stack Overflow</a>) one of the things that excited me most was <strong>embarking on a new project using 100% open source tools.</strong> That project is, of course, <a href="http://discourse.org">Discourse</a>.</p>
<p>Inspired by Google and their use of cheap, commodity x86 hardware to scale on top of the open source Linux OS, I also <a href="http://blog.codinghorror.com/building-servers-for-fun-and-prof-ok-maybe-just-for-fun/">built our own servers</a>. When I get stressed out, when I feel the world weighing heavy on my shoulders and I don't know where to turn &hellip; <em>I build servers</em>. It's therapeutic. </p>
<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">I like to give servers a little pep talk while I build them. &quot;Who&#39;s the best server! Who&#39;s the fastest server!&quot;</p>&mdash; Jeff Atwood (@codinghorror) <a href="https://twitter.com/codinghorror/status/666062934171189249">November 16, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Don't judge me, man.</p>
<p>But more seriously, with the release of Intel's latest Skylake architecture, it's finally time to upgrade our 2013 era Discourse servers to the latest and greatest, something reflective of 2016 &ndash; which means building even more servers.</p>
<p>Discourse <a href="http://blog.codinghorror.com/why-ruby/">runs on a Ruby stack</a> and one thing we learned early on is that <strong>Ruby demands exceptional single threaded performance</strong>, aka, a CPU running as fast as possible. Throwing umptazillion CPU cores at Ruby doesn't buy you a whole lot other than being able to handle more requests at the same time. Which is nice, but doesn't get you <em>speed</em> per se. Someone made a helpful technical video to illustrate exactly how this all works:</p>
<video poster="/content/images/2015/11/javascript-python-ruby-apps.jpg" width="100%" preload="none" controls><source src="http://discourse-cdn.codinghorror.com/uploads/default/original/3X/1/0/1049b1846f0cfa65ed0a9b4ab970d57d6dc0bd5a.mp4"></video>
<p>This is by no means exclusive to Ruby; other languages like JavaScript and Python also share this trait. And Discourse itself is a JavaScript application delivered through the browser, which exercises the mobile / laptop / desktop client CPU. Mobile devices reaching near-parity with desktop performance in single threaded performance is something we're betting on in a big way with Discourse.</p>
<p>So, good news! Although PC performance has been <a href="http://blog.codinghorror.com/the-pc-is-over/">incremental at best in the last 5 years</a>, between Haswell and Skylake, Intel managed to deliver a respectable per-thread performance bump. Since we are upgrading our servers from Ivy Bridge (very similar to the i7-3770k), the generation before Haswell, I'd <a href="http://www.anandtech.com/show/9483/intel-skylake-review-6700k-6600k-ddr4-ddr3-ipc-6th-generation/11">expect</a> a solid 33% performance improvement at minimum.</p>
<p><img src="/content/images/2015/11/skylake-javascript-performance-boost-1.png" alt=""/></p>
<p>Even worse, the more cores they pack on a single chip, the slower they all go. From Intel's current Xeon E5 lineup:</p>
<ul>
<li>E5-1680 &rarr; 8 cores, 3.2 Ghz</li>
<li>E5-1650 &rarr; 6 cores, 3.5 Ghz</li>
<li>E5-1630 &rarr; 4 cores, 3.7 Ghz</li>
</ul>
<p>Sad, isn't it? Which brings me to the following build for our core web tiers, which optimizes for "lots of inexpensive, fast boxes"</p>
<table width="100%">
<tr>
<td><b>2013</b></td>
<td><b>2016</b></td>
</tr>
<tr>
<td valign="top">
Xeon E3-1280 V2 Ivy Bridge 3.6 Ghz / 4.0 Ghz quad-core ($640)<br/>
SuperMicro X9SCM-F-O mobo ($190)<br/>
32 GB DDR3-1600 ECC ($292)<br/>
SC111LT-330CB 1U chassis ($200)<br/>
Samsung 830 512GB SSD &times;2 ($1080)<br/>
1U Heatsink ($25)<br/>
</td>
<td valign="top">
i7-6700k Skylake 4.0 Ghz / 4.2 Ghz quad-core ($370)<br/>
SuperMicro X11SSZ-QF-O mobo ($230)<br/>
64 GB DDR4-2133 ($520)<br/>
CSE-111LT-330CB 1U chassis ($215)<br/>
Samsung 850 Pro 1TB SSD &times;2 ($886)<br/>
1U Heatsink ($20)<br/>
</td>
</tr>
<tr>
<td>$2,427</td>
<td>$2,241</td>
</tr>
<tr>
<td>
31w idle, 87w BurnP6 load
</td>
<td>
14w idle, 81w BurnP6 load
</td>
</tr>
</table>
<p>So, about 10% cheaper than what we spent in 2013, with 2&times; the memory, 2&times; the storage (probably 50-100% faster too), and at least ~33% faster CPU. With lower power draw, to boot! Pretty good. Pretty, pretty, pretty, <em>pretty</em> good.</p>
<p>(Note that the memory bump is only possible thanks to Intel finally relaxing their iron fist of maximum allowed RAM at the low end; that's new to the Skylake generation.)</p>
<p>One thing is conspicuously missing in our 2016 build: Xeons, and <strong>ECC Ram</strong>. In my defense, this isn't intentional &ndash; we wanted the fastest per-thread performance and no Intel Xeon, either currently available or announced, goes to 4.0 GHz with Skylake. Paying half the price for a CPU with better per-thread performance than any Xeon, well, I'm not going to kid you, that's kind of a nice perk too.</p>
<p>So <a href="https://en.wikipedia.org/wiki/ECC_memory">what is ECC all about</a>?</p>
<blockquote>
<p>Error-correcting code memory (ECC memory) is a type of computer data storage that can detect and correct the most common kinds of internal data corruption. ECC memory is used in most computers where data corruption cannot be tolerated under any circumstances, such as for scientific or financial computing.</p>
<p>Typically, ECC memory maintains a memory system immune to single-bit errors: the data that is read from each word is always the same as the data that had been written to it, even if one or more bits actually stored have been flipped to the wrong state. Most non-ECC memory cannot detect errors although some non-ECC memory with parity support allows detection but not correction.</p>
</blockquote>
<p>It's <strong>received wisdom in the sysadmin community that you <em>always</em> build servers with ECC RAM</strong> because, well, you build servers to be reliable, right? Why would anyone intentionally build a server that isn't reliable? <em>Are you crazy, man?</em> Well, looking at that cobbled together Google 1999 server rack, which also utterly lacked any form of ECC RAM, I'm inclined to think that reliability measured by "lots of redundant boxes" is more worthwhile and easier to achieve than the platonic ideal of making every individual server bulletproof.</p>
<p>Being the type of guy who likes to question stuff&hellip; I began to question. Why is it that ECC is so essential anyway? If ECC was so important, so critical to the reliable function of computers, why isn't it built in to every desktop, laptop, and smartphone in the world by now? Why is it optional? This smells awfully&hellip; <em>enterprisey</em> to me.</p>
<p>Now, before everyone stops reading and I get permanently branded as "that crazy guy who hates ECC", I think ECC RAM is fine:</p>
<ul>
<li>The cost difference between ECC and not-ECC is minimal these days.</li>
<li>The performance difference between ECC and not-ECC is minimal these days.</li>
<li>Even if ECC only protects you from rare 1% hardware error cases that you may never hit until you literally build hundreds or thousands of servers, it's cheap insurance.</li>
</ul>
<p>I am not anti-insurance, nor am I anti-ECC. But I do seriously question whether ECC is as operationally critical as we have been led to believe, and I think the data shows modern, non-ECC RAM is already extremely reliable.</p>
<p>First, let's look at the <a href="https://www.pugetsystems.com/labs/articles/Most-Reliable-Hardware-of-2014-616/">Puget Systems reliability stats</a>. These guys build lots of commodity x86 gamer PCs, burn them in, and ship them. They helpfully track statistics on how many parts fail either from burn-in or later in customer use. Go ahead and read through the stats.</p>
<blockquote>
<p>For the last two years, CPU reliability has dramatically improved. What is interesting is that this lines up with the launch of the Intel Haswell CPUs which was when the CPU voltage regulation was moved from the motherboard to the CPU itself. At the time we theorized that this should raise CPU failure rates (since there are more components on the CPU to break) but the data shows that it has actually increased reliability instead.</p>
<p>Even though DDR4 is very new, reliability so far has been excellent. Where DDR3 desktop RAM had an overall failure rate in 2014 of ~0.6%, DDR4 desktop RAM had absolutely no failures.</p>
<p>SSD reliability has dramatically improved recently. This year Samsung and Intel SSDs only had a 0.2% overall failure rate compared to 0.8% in 2013.</p>
</blockquote>
<p>Modern commodity computer parts from reputable vendors are amazingly reliable. And their trends show from 2012 onward essential PC parts have gotten <em>more</em> reliable, not less. (I can also vouch for the improvement in SSD reliability as we have had zero server SSD failures in 3 years across our 12 servers with 24+ drives, whereas in 2011 I was writing about <a href="http://blog.codinghorror.com/the-hot-crazy-solid-state-drive-scale/">the Hot/Crazy SSD Scale</a>.) And doesn't this make sense from a financial standpoint? How does it benefit you as a company to ship <em>unreliable</em> parts? That's money right out of your pocket and the reseller's pocket, plus time spent dealing with returns.</p>
<p>We had a, uh, "spirited" discussion about this internally on our private Discourse instance.</p>
<p><img src="/content/images/2015/11/discourse-2016-server-discussion.png" alt=""/></p>
<p>This is <a href="http://blog.brianmoses.net/2014/03/why-i-chose-non-ecc-ram-for-my-freenas.html">not a new debate</a> by any means, but I was frustrated by the lack of data out there. In particular, I'm really questioning <a href="https://storagemojo.com/2012/10/23/dram-errors-soft-and-hard/">the difference between "soft" and "hard" memory errors</a>:</p>
<blockquote>
<p>But what is the nature of those errors? Are they soft errors – as is commonly believed – where a stray Alpha particle flips a bit? Or are they hard errors, where a bit gets stuck?</p>
</blockquote>
<p><strong>I absolutely believe that hard errors are reasonably common.</strong> RAM DIMMS can have bugs, or the chips on the DIMM can fail, or there's a design flaw in circuitry on the DIMM that only manifests in certain corner cases or under extreme loads. I've seen it plenty. But <a href="https://en.wikipedia.org/wiki/Soft_error">a soft error</a> where a bit of memory randomly flips?</p>
<blockquote>
<p>There are two types of soft errors, chip-level soft error and system-level soft error. Chip-level soft errors occur when the radioactive atoms in the chip's material decay and release alpha particles into the chip. Because an alpha particle contains a positive charge and kinetic energy, the particle can hit a memory cell and cause the cell to change state to a different value. The atomic reaction is so tiny that it does not damage the actual structure of the chip.</p>
</blockquote>
<p>Outside of airplanes and spacecraft, I have a difficult time believing that soft errors happen with any frequency, otherwise most of the computing devices on the planet would be crashing left and right. I deeply distrust the anecdotal voodoo behind "but one of your computer's memory bits could flip, you'd never know, and corrupted data would be written!" It'd be one thing if we observed this regularly, but I've been unhealthily obsessed with computers since birth and I have never found random memory corruption to be a real, actual problem on any computers I have either owned or had access to.</p>
<p>But who gives a damn what I think. <em>What does the data say?</em></p>
<p>A <a href="http://www.ece.rochester.edu/~xinli/usenix07/">2007 study</a> found that the observed soft error rate in live servers was <em>two orders of magnitude</em> lower than previously predicted:</p>
<blockquote>
<p>Our preliminary result suggests that <strong>the memory soft error rate in two real production systems (a rack-mounted server environment and a desktop PC environment) is much lower than what the previous studies concluded.</strong> Particularly in the server environment, with high probability, the soft error rate is at least two orders of magnitude lower than those reported previously. We discuss several potential causes for this result.</p>
</blockquote>
<p>A <a href="http://www.cs.toronto.edu/~bianca/papers/sigmetrics09.pdf">2009 study on Google's server farm</a> notes that soft errors were difficult to find:</p>
<blockquote>
<p>We provide <strong>strong evidence that memory errors are dominated by hard errors, rather than soft errors</strong>, which previous work suspects to be the dominant error mode.</p>
</blockquote>
<p>Yet another <a href="http://selse.org//images/selse_2012/Papers/selse2012_submission_4.pdf">large scale study from 2012</a> discovered that RAM errors were dominated by permanent failure modes typical of hard errors:</p>
<blockquote>
<p>Our study has several main findings. First, we find that approximately <strong>70% of DRAM faults are recurring (e.g., permanent) faults, while only 30% are transient faults.</strong> Second, we find that large multi-bit faults, such as faults that affects an entire row, column, or bank, constitute over 40% of all DRAM faults. Third, we find that almost 5% of DRAM failures affect board-level circuitry such as data (DQ) or strobe (DQS) wires. Finally, we find that chipkill functionality reduced the system failure rate from DRAM faults by 36x.</p>
</blockquote>
<p>In the end, we decided the non-ECC RAM risk was acceptable for every tier of service except our databases. Which is kind of a bummer since <a href="http://www.itworld.com/article/2985214/hardware/intels-xeon-roadmap-for-2016-leaks.html">higher end Skylake Xeons got pushed back to the big Purley platform upgrade in 2017</a>. Regardless, we burn in every server we build with a complete run of memtestx86 and overnight prime95/mprime, and you should too. There's one whirring away through endless memory tests right behind me as I write this.</p>
<p>I find it very, very suspicious that ECC &ndash; if it is so critical to preventing these random, memory corrupting bit flips &ndash; <strong>has not already been built into every type of RAM that we ship in the ubiquitous computing devices all around the world as a cost of doing business.</strong> But I am by no means opposed to paying a small insurance premium for server farms, either. You'll have to look at the data and decide for yourself. Mostly I wanted to collect all this information in one place so people who are also evaluating the cost/benefit of ECC RAM for themselves can read the studies and decide what they want to do.</p>
<p>Please feel free to leave comments if you have other studies to cite, or significant measured data to share.</p>
<table>
<tr><td class="welovecodinghorror">
[advertisement] At Stack Overflow, we put developers first. We already help you find answers to your tough coding questions; now let us help you <a href="http://careers.stackoverflow.com" rel="nofollow">find your next job</a>.
</td></tr>
</table>
<b><a href="http://blog.codinghorror.com/to-ecc-or-not-to-ecc/#discourse-comments">Discussion</a></b>
</section>
</article>
<article class="post">
<header class="post-header">
<span class="post-meta"><time datetime="2015-09-17">17 Sep 2015</time> </span>
<h2 class="post-title"><a href="/building-a-pc-part-viii-iterating/">Building a PC, Part VIII: Iterating</a></h2>
</header>
<section class="post-content">
<p>The last time I seriously upgraded my PC was in 2011, because <a href="http://blog.codinghorror.com/the-pc-is-over/">the PC is over</a>. And in some ways, it truly is &ndash; they can slap a ton more CPU cores on a die, for sure, but the overall single core performance increase from a 2011 high end Intel CPU to today's high end Intel CPU is &hellip; really quite modest, on the order of maybe 30% to 40%.</p>
<p>In that same timespan, mobile and tablet CPU performance has continued to just about double every year. Which means the forthcoming iPhone 6s <a href="http://www.techtimes.com/articles/77083/20150818/alleged-iphone-6s-geekbench-3-results-show-2gb-ram-and-tri-core-1-5-ghz-cpu.htm">will be</a> almost <strong>10 times faster</strong> than the iPhone 4 was.</p>
<p><a href="https://browser.primatelabs.com/ios-benchmarks"><img src="/content/images/2015/09/geekbench-single-core-iphone-results.png" alt="iPhone single core geekbench results" title=""/></a></p>
<p>Remember, that's only single core CPU performance &ndash; I'm not even factoring in the move from single, to dual, to triple core as well as generally faster memory and storage. This stuff is old hat on desktop, where we've had mainstream dual cores for a decade now, but they are <em>huge</em> improvements for mobile.</p>
<p>When your mobile devices get 10 times faster in the span of four years, it's hard to muster much enthusiasm for a modest 1.3 &times; or 1.4 &times; iterative improvement in your PC's performance over the same time.</p>
<p>I've been slogging away at this for a while; my current PC build series spans 7 years:</p>
<ul>
<li><a href="http://blog.codinghorror.com/building-a-pc-part-vii-rebooting/">Building a PC, Part VII: Rebooting</a></li>
<li><a href="http://www.codinghorror.com/blog/2009/12/building-a-pc-part-vi-rebuilding.html">Building a PC, Part VI: Rebuilding</a></li>
<li><a href="http://www.codinghorror.com/blog/2008/04/building-a-pc-part-v-upgrading.html">Building a PC, Part V: Upgrading</a></li>
<li><a href="http://www.codinghorror.com/blog/2007/07/building-a-pc-part-iv-now-its-your-turn.html">Building a PC, Part IV: Now It&#39;s Your Turn</a></li>
<li><a href="http://www.codinghorror.com/blog/2007/07/building-a-pc-part-iii-overclocking.html">Building a PC, Part III: Overclocking</a></li>
<li><a href="http://www.codinghorror.com/blog/2007/07/building-a-pc-part-ii.html">Building a PC, Part II: Burn in</a></li>
<li><a href="http://www.codinghorror.com/blog/2007/07/building-a-pc-part-i.html">Building a PC, Part I: Minimal boot</a></li>
</ul>
<p>The fun part of building a PC is that it's relatively easy to swap out the guts when something compelling comes along. CPU performance improvements may be modest these days, but there are still bright spots where performance is increasing more dramatically. Mainly in graphics hardware and, in this case, <strong>storage</strong>.</p>
<p>The current latest-and-greatest Intel CPU is Skylake. Like Sandy Bridge in 2011, which brought us much faster 6 Gbps SSD-friendly drive connectors (although only two of them), the Skylake platform brings us another key storage improvement &ndash; the ability to connect hard drives directly to the PCI Express lanes. Which looks like this:</p>
<p><a href="http://techreport.com/review/28446/samsung-sm951-pcie-ssd-reviewed"><img src="/content/images/2015/09/m2-drive-on-mobo.jpg" alt="" title=""/></a></p>
<p>&hellip; and performs like this:</p>
<p><a href="http://arstechnica.com/gadgets/2015/08/intel-skylake-core-i7-6700k-reviewed/"><img src="/content/images/2015/09/Ars-Technica-Skylake-Review-Charts-012.png" alt="" title=""/></a></p>
<p><strong>Now <em>there's</em> the 3&times; performance increase we've been itching for!</strong> To be fair, a raw increase of 3&times; in drive performance doesn't necessarily equate to a computer that boots in one third the time. But here's why disk speed matters:</p>
<blockquote>
<p>If the CPU registers are how long it takes you to fetch data from your brain, then <a href="http://blog.codinghorror.com/the-infinite-space-between-words/">going to disk is the equivalent of fetching data from Pluto</a>.</p>
</blockquote>
<p>What I've always loved about SSDs is that they attack the <strong>PC's worst-case performance scenario</strong>, when information has to come off the slowest device inside your computer &ndash; the hard drive. SSDs massively reduced the variability of requests for data. Let's compare L1 cache access time to minimum disk access time:</p>
<blockquote>
<p>Traditional hard drive <br/>
0.9 ns &rarr; 10 ms (variability of 11,111,111× )</p>
<p>SSD <br/>
0.9 ns &rarr; 150 µs (variability of 166,667× )</p>
</blockquote>
<p>SSDs provide a reduction in overall performance variability of 66×! And when comparing latency:</p>
<blockquote>
<p><a href="http://storagereview.com/toshiba_sata_hdd_enterprise_35_review_mg03acax00">7200rpm HDD</a> &mdash; 1800ms <br/>
<a href="http://storagereview.com/intel_ssd_dc_s3500_enterprise_review">SATA SSD</a> &mdash; 4ms <br/>
<a href="http://storagereview.com/huawei_tecal_es3000_application_accelerator_review">PCIe SSD</a> &mdash; 0.34ms </p>
</blockquote>
<p>Even going from a fast SATA SSD to a PCI Express SSD, you're looking at a 10x reduction in drive latency.</p>
<p>Here's what you need:</p>
<ul>
<li><a href="http://www.amazon.com/dp/B01639696U/?tag=codihorr-20">256GB Samsung 950 Pro NVMe M.2 drive</a> $198</li>
<li><a href="http://www.amazon.com/dp/B012NH05UW/?tag=codihorr-20">Asus Z170-A motherboard</a> $165</li>
<li><a href="http://www.amazon.com/dp/B012M8M7TY/?tag=codihorr-20">Intel i5-i6600k Skylake CPU</a> $270</li>
<li><a href="http://www.amazon.com/dp/B00TPQPOIS/?tag=codihorr-20">16GB DDR4 memory</a> $134</li>
</ul>
<p>These are the basics. It's best to use the M.2 connection as a fast boot / system drive, so I scaled it back to the smaller 256 GB version. I also had a lot of trouble getting my hands on the faster i7-6700k CPU, which appears supply constrained and is currently overpriced as a result.</p>
<p>(Also, be careful, as some older M.2 drives can use the older ACPI connection type. Make sure yours is NVMe.)</p>
<p>Even though the days of doubling (or even 1.5&times;-ing) CPU performance are long gone for PCs, there are still some key iterative performance milestones to hit. Like <a href="http://blog.codinghorror.com/our-brave-new-world-of-4k-displays/">mainstream 4k displays</a>, I believe mainstream PCI express SSDs are another important step in the overall evolution of desktop computing. Or <a href="http://blog.codinghorror.com/the-pc-is-over/">its corpse</a>, anyway.</p>
<table>
<tr><td class="welovecodinghorror">
[advertisement] <a href="http://careers.stackoverflow.com" rel="nofollow">Find a better job the Stack Overflow way</a> - what you need when you need it, no spam, and no scams.
</td></tr>
</table>
<b><a href="http://blog.codinghorror.com/building-a-pc-part-viii-iterating/#discourse-comments">Discussion</a></b>
</section>
</article>
<nav class="pagination" role="navigation">
<span class="page-number">Page 1 of 281</span>
<a class="older-posts" href="/page/2/">Older Posts <span aria-hidden="true">&rarr;</span></a>
</nav>
</main>
<script type="text/javascript">
  var discourseUrl = "http://discourse.codinghorror.com/";

  (function() {
    var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
    d.src = discourseUrl + 'javascripts/count.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
  })();
</script>
<aside class="sidebar">
<script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?zoneid=1673&serve=C6AILKT&placement=blogcodinghorrorcom" id="_carbonads_js"></script>
<div id="hireme" class="hireme codinghorror" style="min-height: 220px; margin-bottom: 15px;"></div>
<script>
    setTimeout(function () {
        var a = document.createElement("script");
        var b = document.getElementsByTagName('script')[0];
        a.src = "//clc.stackoverflow.com/j/p?d=hireme";
        a.async = true; 
        a.type = "text/javascript"; 
        b.parentNode.insertBefore(a, b);
    }, 5);
</script>
<div class="welovecodinghorror" style="margin-bottom:15px">
[ad] Enjoy the blog? Read <b><a href="http://www.hyperink.com/Effective-Programming-More-Than-Writing-Code-b1559">Effective Programming: More than Writing Code</a></b> and <b><a href="http://www.hyperink.com/How-To-Stop-Sucking-And-Be-Awesome-Instead-b9A74B5CBA6">How to Stop Sucking and Be Awesome Instead</a></b> on your Kindle, iPad, Nook, or as a PDF.
</div>
<h3>Resources</h3>
<ul>
<li><a href="/about-me/">About Me</a></li>
<li><a href="http://twitter.com/codinghorror">@codinghorror</a></li>
<li><a href="http://www.discourse.org/">discourse.org</a></li>
<li><a href="http://stackexchange.com/">stackexchange.com</a></li>
<li><a href="/recommended-reading-for-developers/">Recommended Reading</a></li>
</ul>
<ul>
<li><a href="http://feeds.feedburner.com/codinghorror" class="icon-feed">&nbsp;Subscribe in a reader</a></li>
<li><a href="http://feedburner.google.com/fb/a/mailverify?uri=codinghorror&amp;loc=en_US" class="icon-email">&nbsp;Subscribe via email</a></li>
</ul>
<p>Coding Horror has been continuously published since 2004</p>
<footer class="site-footer">
<section class="copyright">Copyright <a rel="author" href="https://profiles.google.com/codinghorror1">Jeff Atwood</a> &copy; 2016<br/>
Logo image &copy; 1993 Steven C. McConnell <br/>
Proudly published with <a class="icon-ghost" href="http://ghost.org">Ghost</a></section>
</footer></aside>
</div>
 
 
<script>
    document.write(unescape("%3Cscript src='" + (document.location.protocol == "https:" ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js'%3E%3C/script%3E"));
    </script>
<script>
    COMSCORE.beacon({
      c1: 2,
      c2: "6035669",
      c3: "",
      c4: "http://www.codinghorror.com/blog/",
      c5: "",
      c6: "",
      c15: ""
    });
    </script>
<noscript>
<img src="http://b.scorecardresearch.com/b?c1=2&amp;c2=6035669&amp;c3=&amp;c4=http%3A%2F%2Fwww.codinghorror.com%2Fblog%2F&amp;c5=&amp;c6=&amp;c15=&amp;cv=1.3&amp;cj=1" style="display:none" width="0" height="0" alt=""/>
</noscript>
<img src="/view.gif?page=/" alt="" style="display:none" hidden />
</body>
</html>
